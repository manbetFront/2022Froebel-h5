import JSEncrypt from 'jsencrypt'
const __pubkey__ = `MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhSazxfY8JCDU4Ihza5VII7Ku4NpAbtYn8MMcHQCGdc8nauWKOeLqMO6+nrex+eirwo9Ac4v2FXli3nbj3BaCENHVOUBeVJQbbplUeUS8quei+ihgoQMLkc8pLDOdYt+XeH30XeRxHfQNx2fx4yUdWVLbpwzuQIP8ACh8Lx3rNteMTAosNVnkBUQAkJ3zmuY2N01IxlBRwZpdxmJPmWafKfoF535UVKT+bV9Ce7LRzWB1dF2X9b2/ektKgLifQd9o6laGX79f9CshZ9u0nT3XDvHnCF3rKfLYDgNfkwcCrMWeuJ7EVMW4Mx5VjY0pY0mxFi+t6NA5rk/IAPDstI3W0QIDAQAB`

// 全站加密
export const setEncrypt = (str = '', publicKey = __pubkey__) => {
  const encrypt = new JSEncrypt();
  encrypt.setPublicKey(publicKey);
  return encrypt.encrypt(str);
}
// 判断是否为全站
export const isApp = () => {
  return !verifyUrlParams('username')
}
// 验证url传参
export const verifyUrlParams = (key, url = location.href) => {
  key = key.replace(/[\[\]]/g, "\\$&");
  const reg = new RegExp(`[\\?&]${key}(=([^&#]*)|&|#|$)`)
  return reg.exec(url)
}

// 方案1：调用全站提供的全局方法
export const getUsernameByPlatform = () => {
  // 初始化用户名
  let username = ''
  // 全站获取用户名
  if (isApp()) {
    if (window.ios) {
      username = window.ios.getUserName()
    }
    if (window.android) {
      username = window.android.getUserName()
    }
    // 加密
    if (username) {
      username = setEncrypt(username)
    }
  } else { // h5获取用户名
    username = getUrlParams(window.location.href).username
  }
  return username
}

/*
 * 方案2：异步获取用户名
 */
export const asyncGetUsernameByPlatform = () => {
  return new Promise((res) => {
    // 初始化用户名
    let username = ''
    // 全站获取用户名
    if (isApp()) {
      if (window.android) { // android
        username = window.android.getUserName()
        // 加密
        if (username) {
          username = setEncrypt(username)
        }
        res(username)
      } else { // ios 旧版为异步返回用户名
        if (window.ios) {
          username = window.ios.getUserName()
          // 加密
          if (username) {
            username = setEncrypt(username)
          }
          res(username)
        } else {
          // 等待ios加载完页面
          window.onload = () => {
            // 等待ios 赋值username给 input[name=msn], 1秒钟后获取用户名
            let timer = setTimeout(() => {
              let inputDom = document.getElementsByName('msn')[0]
              if (inputDom && inputDom.value) {
                username = inputDom.value
                // 加密
                res(setEncrypt(username))
              } else {
                // 未获取到用户名 undefined
                res()
              }
              clearTimeout(timer)
            }, 650)
          }
        }
      }
    } else {// h5获取用户名
      username = getUrlParams(window.location.href).username
      res(username)
    }
  })
}

export const getUrlParams = (url = location.href) => {
  const Params = {}
  url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
    Params[key] = value
  })
  return Params
}
