{"remainingRequest":"/Users/tanwen/project/2022Froebel-h5/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tanwen/project/2022Froebel-h5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tanwen/project/2022Froebel-h5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanwen/project/2022Froebel-h5/src/pages/newyearpc/index.vue?vue&type=template&id=745d8c3f&scoped=true&","dependencies":[{"path":"/Users/tanwen/project/2022Froebel-h5/src/pages/newyearpc/index.vue","mtime":1671438484702},{"path":"/Users/tanwen/project/2022Froebel-h5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanwen/project/2022Froebel-h5/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tanwen/project/2022Froebel-h5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanwen/project/2022Froebel-h5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}